///
/// @Generated by Mockolo
///

import CoreLocation
import Foundation
import ReactorKit
import RIBs
@testable import RIBsReactorKit
import RxRelay
import RxSwift
import UIKit

// MARK: - RootInteractableMock

final class RootInteractableMock: RootInteractable {
  init() {}
  init(
    router: RootRouting? = nil,
    listener: RootListener? = nil,
    isActive: Bool = false,
    isActiveStream: Observable<Bool> = PublishSubject<Bool>()
  ) {
    self.router = router
    self.listener = listener
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  private(set) var routerSetCallCount = 0
  var router: RootRouting? { didSet { self.routerSetCallCount += 1 } }

  private(set) var listenerSetCallCount = 0
  var listener: RootListener? { didSet { self.listenerSetCallCount += 1 } }
  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { self.isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { self.isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if self.isActiveStreamSubjectKind == 0 {
        return self.isActiveStreamSubject
      } else if self.isActiveStreamSubjectKind == 1 {
        return self.isActiveStreamBehaviorSubject
      } else if self.isActiveStreamSubjectKind == 2 {
        return self.isActiveStreamReplaySubject
      } else {
        return self._isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        self.isActiveStreamSubject = val
        self.isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        self.isActiveStreamBehaviorSubject = val
        self.isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        self.isActiveStreamReplaySubject = val
        self.isActiveStreamSubjectKind = 2
      } else {
        self._isActiveStream = newValue
        self.isActiveStreamSubjectKind = 3
      }
    }
  }

  public private(set) var activateCallCount = 0
  public var activateHandler: (() -> ())?
  public func activate() {
    self.activateCallCount += 1
    if let activateHandler = activateHandler {
      activateHandler()
    }
  }

  public private(set) var deactivateCallCount = 0
  public var deactivateHandler: (() -> ())?
  public func deactivate() {
    self.deactivateCallCount += 1
    if let deactivateHandler = deactivateHandler {
      deactivateHandler()
    }
  }
}

// MARK: - MainTabBarInteractableMock

final class MainTabBarInteractableMock: MainTabBarInteractable {
  init() {}
  init(
    router: MainTabBarRouting? = nil,
    listener: MainTabBarListener? = nil,
    isActive: Bool = false,
    isActiveStream: Observable<Bool> = PublishSubject<Bool>()
  ) {
    self.router = router
    self.listener = listener
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  private(set) var routerSetCallCount = 0
  var router: MainTabBarRouting? { didSet { self.routerSetCallCount += 1 } }

  private(set) var listenerSetCallCount = 0
  var listener: MainTabBarListener? { didSet { self.listenerSetCallCount += 1 } }
  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { self.isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { self.isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if self.isActiveStreamSubjectKind == 0 {
        return self.isActiveStreamSubject
      } else if self.isActiveStreamSubjectKind == 1 {
        return self.isActiveStreamBehaviorSubject
      } else if self.isActiveStreamSubjectKind == 2 {
        return self.isActiveStreamReplaySubject
      } else {
        return self._isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        self.isActiveStreamSubject = val
        self.isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        self.isActiveStreamBehaviorSubject = val
        self.isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        self.isActiveStreamReplaySubject = val
        self.isActiveStreamSubjectKind = 2
      } else {
        self._isActiveStream = newValue
        self.isActiveStreamSubjectKind = 3
      }
    }
  }

  public private(set) var activateCallCount = 0
  public var activateHandler: (() -> ())?
  public func activate() {
    self.activateCallCount += 1
    if let activateHandler = activateHandler {
      activateHandler()
    }
  }

  public private(set) var deactivateCallCount = 0
  public var deactivateHandler: (() -> ())?
  public func deactivate() {
    self.deactivateCallCount += 1
    if let deactivateHandler = deactivateHandler {
      deactivateHandler()
    }
  }
}

// MARK: - RootRoutingMock

final class RootRoutingMock: RootRouting {
  init() {}
  init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.interactable = interactable
    self.children = children
  }

  private(set) var attachMainTabBarRIBCallCount = 0
  var attachMainTabBarRIBHandler: (() -> ())?
  func attachMainTabBarRIB() {
    self.attachMainTabBarRIBCallCount += 1
    if let attachMainTabBarRIBHandler = attachMainTabBarRIBHandler {
      attachMainTabBarRIBHandler()
    }
  }

  private(set) var cleanupViewsCallCount = 0
  var cleanupViewsHandler: (() -> ())?
  func cleanupViews() {
    self.cleanupViewsCallCount += 1
    if let cleanupViewsHandler = cleanupViewsHandler {
      cleanupViewsHandler()
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }
  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }
  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - MainTabBarRoutingMock

final class MainTabBarRoutingMock: MainTabBarRouting {
  init() {}
  init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  private(set) var attachTabsCallCount = 0
  var attachTabsHandler: (() -> ())?
  func attachTabs() {
    self.attachTabsCallCount += 1
    if let attachTabsHandler = attachTabsHandler {
      attachTabsHandler()
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { self.viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }
  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }
  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - UserListRoutingMock

final class UserListRoutingMock: UserListRouting {
  init() {}
  init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  private(set) var attachUserInformationRIBCallCount = 0
  var attachUserInformationRIBHandler: (() -> ())?
  func attachUserInformationRIB() {
    self.attachUserInformationRIBCallCount += 1
    if let attachUserInformationRIBHandler = attachUserInformationRIBHandler {
      attachUserInformationRIBHandler()
    }
  }

  private(set) var detachUserInformationRIBCallCount = 0
  var detachUserInformationRIBHandler: (() -> ())?
  func detachUserInformationRIB() {
    self.detachUserInformationRIBCallCount += 1
    if let detachUserInformationRIBHandler = detachUserInformationRIBHandler {
      detachUserInformationRIBHandler()
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { self.viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }
  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }
  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - UserCollectionRoutingMock

final class UserCollectionRoutingMock: UserCollectionRouting {
  init() {}
  init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  private(set) var attachUserInformationRIBCallCount = 0
  var attachUserInformationRIBHandler: (() -> ())?
  func attachUserInformationRIB() {
    self.attachUserInformationRIBCallCount += 1
    if let attachUserInformationRIBHandler = attachUserInformationRIBHandler {
      attachUserInformationRIBHandler()
    }
  }

  private(set) var detachUserInformationRIBCallCount = 0
  var detachUserInformationRIBHandler: (() -> ())?
  func detachUserInformationRIB() {
    self.detachUserInformationRIBCallCount += 1
    if let detachUserInformationRIBHandler = detachUserInformationRIBHandler {
      detachUserInformationRIBHandler()
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { self.viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }
  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }
  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - MainTabBarPresentableMock

final class MainTabBarPresentableMock: MainTabBarPresentable {
  init() {}
  init(listener: MainTabBarPresentableListener? = nil) {
    self.listener = listener
  }

  private(set) var listenerSetCallCount = 0
  var listener: MainTabBarPresentableListener? { didSet { self.listenerSetCallCount += 1 } }
}

// MARK: - RootListenerMock

final class RootListenerMock: RootListener {
  init() {}
}

// MARK: - RootViewControllableMock

final class RootViewControllableMock: RootViewControllable {
  init() {}
  init(uiviewController: UIViewController = UIViewController()) {
    self.uiviewController = uiviewController
  }

  public private(set) var uiviewControllerSetCallCount = 0
  public var uiviewController: UIViewController = .init() { didSet { self.uiviewControllerSetCallCount += 1 } }
}

// MARK: - MainTabBarViewControllableMock

final class MainTabBarViewControllableMock: MainTabBarViewControllable {
  init() {}
  init(uiviewController: UIViewController = UIViewController()) {
    self.uiviewController = uiviewController
  }

  private(set) var setViewControllersCallCount = 0
  var setViewControllersHandler: (([ViewControllable], Bool) -> ())?
  func setViewControllers(_ viewControllers: [ViewControllable], animated: Bool) {
    self.setViewControllersCallCount += 1
    if let setViewControllersHandler = setViewControllersHandler {
      setViewControllersHandler(viewControllers, animated)
    }
  }

  public private(set) var uiviewControllerSetCallCount = 0
  public var uiviewController: UIViewController = .init() { didSet { self.uiviewControllerSetCallCount += 1 } }
}

// MARK: - MainTabBarListenerMock

final class MainTabBarListenerMock: MainTabBarListener {
  init() {}
}

// MARK: - MainTabBarBuildableMock

final class MainTabBarBuildableMock: MainTabBarBuildable {
  init() {}

  private(set) var buildCallCount = 0
  var buildHandler: ((MainTabBarBuildDependency) -> (MainTabBarRouting))?
  func build(with dynamicBuildDependency: MainTabBarBuildDependency) -> MainTabBarRouting {
    self.buildCallCount += 1
    if let buildHandler = buildHandler {
      return buildHandler(dynamicBuildDependency)
    }
    return MainTabBarRoutingMock()
  }
}

// MARK: - UserCollectionBuildableMock

final class UserCollectionBuildableMock: UserCollectionBuildable {
  init() {}

  private(set) var buildCallCount = 0
  var buildHandler: ((UserCollectionBuildDependency) -> (UserCollectionRouting))?
  func build(with dynamicBuildDependency: UserCollectionBuildDependency) -> UserCollectionRouting {
    self.buildCallCount += 1
    if let buildHandler = buildHandler {
      return buildHandler(dynamicBuildDependency)
    }
    return UserCollectionRoutingMock()
  }
}

// MARK: - UserListBuildableMock

final class UserListBuildableMock: UserListBuildable {
  init() {}

  private(set) var buildCallCount = 0
  var buildHandler: ((UserListBuildDependency) -> (UserListRouting))?
  func build(with dynamicBuildDependency: UserListBuildDependency) -> UserListRouting {
    self.buildCallCount += 1
    if let buildHandler = buildHandler {
      return buildHandler(dynamicBuildDependency)
    }
    return UserListRoutingMock()
  }
}
